check()
library(devtools)
packageVersion()
packageVersion("devtools")
library(regexcite)
install.packages("regexcite")
create_package()
getwd()
create_package(getwd())
library(mlr3verse)
library(mlr3proba)
?partition
library(mlr3)
library(mlr3proba)
library(mlr3verse)
library(mlr3tuningspaces)
library(reticulate)
library(survivalmodels)
library(dplyr)
library(survival)
library(survminer)
library(plyr)
library(edgeR)
library(DESeq2)
library(foreach)
library(data.table)
library(future)
library(future.apply)
library(caret)
library(RSBID)
library(dplyr)
library(MASS)
library(ROCR)
library(limma)
library(prioritylasso)
library(ipflasso)
?prioritylasso
?ipflasso
??ipflasso
library(installr)
updateR()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("MLSeq")
getwd()
print("Available preprocessing methods are: \"deseq\" and \"voom\".")
?cat
cat("Available preprocessing methods are: \"deseq\" and \"voom\".")
cat("Preprocess method not specified. Using the original data without any preprocessing")
library(IPO)
install.packages("IPO")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("IPO")
library(IPO)
BiocManager::install("mzR")
install.packages("Rcpp")
install.packages("Rcpp")
library(IPO)
BiocManager::install("xcms")
library(xcms)
peakpickingParameters <- getDefaultXcmsSetStartingParams(‘centWave’)
peakPickingParameters <- getDefaultXcmsSetStartingParams("centWave")
peakPickingParameters
resultPeakpickingbestsettingsresult optimizedXcmsSetObject <- resultPeakpickingbestsettingsxset
getwd()
fred <- function(x) UseMethod("fred")
fred(1:4)
fred.default <- function(x) {
cat("in fred.default\n")
invisible(NULL)
}
fred(1:4)
methods(summary)
summary
fix(summary)
summary.data.frame
else if (method == "cforest"){
library(mlr3)
library(mlr3proba)
?TaskSurv$new
?TaskSurv
library(mlr3)
??measures
library(devtools)
check()
library(mlr3)
?train
method <- "blackboost"
?new
getwd()
origData <- read.csv("/R/ACC_ProteinCoding.csv")
origData <- read.csv("./R/ACC_ProteinCoding.csv")
t_harmonised <- origData
# remove 0's and NA's from time
# remove NA's from status
t_harmonised <- t_harmonised[!is.na(t_harmonised$time),] # removes NA rows from time
t_harmonised <- t_harmonised[!is.na(t_harmonised$status),] # removes NA rows from status
t_harmonised <- t_harmonised[t_harmonised$time != 0,] # removes rows where time is 0
nrow(t_harmonised)
table(t_harmonised$status)
rownames(t_harmonised) <- t_harmonised[,1]
t_harmonised2 <- t_harmonised[,-1]
# t_harmonised2 <- t_harmonised # Bazı verilerde X sütunu yok
names(t_harmonised2)[names(t_harmonised2) == "t_harmonised$time"] <- "time"
names(t_harmonised2)[names(t_harmonised2) == "t_harmonised$status"] <- "status"
mydata <- t_harmonised2
mydata2 <- mydata %>% select(-time, -status)
library(dplyr)
t_harmonised <- origData
# remove 0's and NA's from time
# remove NA's from status
t_harmonised <- t_harmonised[!is.na(t_harmonised$time),] # removes NA rows from time
t_harmonised <- t_harmonised[!is.na(t_harmonised$status),] # removes NA rows from status
t_harmonised <- t_harmonised[t_harmonised$time != 0,] # removes rows where time is 0
nrow(t_harmonised)
table(t_harmonised$status)
rownames(t_harmonised) <- t_harmonised[,1]
t_harmonised2 <- t_harmonised[,-1]
# t_harmonised2 <- t_harmonised # Bazı verilerde X sütunu yok
names(t_harmonised2)[names(t_harmonised2) == "t_harmonised$time"] <- "time"
names(t_harmonised2)[names(t_harmonised2) == "t_harmonised$status"] <- "status"
mydata <- t_harmonised2
mydata2 <- mydata %>% select(-time, -status)
View(mydata)
View(mydata2)
View(origData)
View(origData)
View(mydata)
dim(mydata)
rsmpParams <- list("repeated_cv", 10, 2)
rsmpParams[[1]]
rsmpParams[[2]]
rsmpParams[[3]]
rsmpParams <- list("repeated_cv", repeats = 10, folds = 2)
rsmpParams[[1]]
rsmpParams[[2]]
rsmpParams <- list("repeated_cv", "repeats = 10", "folds= 2")
rsmpParams[[2]]
testList <- list(rsmpParams, "surv.cindex")
testList[[1]]
rsmpParams
rsmpV <- unlist(rsmpParams)
rsmpV
?split
rsmpV2 <- split(rsmpV)
paste(rsmpV)
paste(rsmpV, collapse = ",")
paste(rsmpV, collapse = ", ")
noquote(paste(rsmpV, collapse = ", "))
noquote(paste(rsmpV, collapse = ", "))
rsmp <- rsmpParams[[1]]
rsmp
paste(rsmp)
randomFunc <- function(arg1, ...){
args <- list(...)
print(args)
}
randomFunc(1, "a", 2, 3)
randomFunc(1, "a", 2, list("a", 5, 10))
randomFunc(1, arg2 = "a", arg3 = 2, list("a", 5, 10))
randomFunc <- function(arg1, ...){
args <- list(...)
print(args$arg2)
}
randomFunc(1, arg2 = "a", arg3 = 2, list("a", 5, 10))
library(mlr3)
?rsmp
do.call(rsmp, list("repeated_cv", repeats = 10, folds = 2))
do.call(mlr3::rsmp, list("repeated_cv", repeats = 10, folds = 2))
